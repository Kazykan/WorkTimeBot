from __future__ import annotations
from datetime import timedelta

from aiogram import F, Router, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery

from app.db.session import db_session
from app.fsm.callback_data import AddPaymentCallback, ObjectCallback
from app.handlers.utils.db_utilits import (
    get_user_and_objects,
    process_payment_transaction,
)
from app.handlers.utils.time_entry import prompt_object_selection
from app.keyboards.common import Texts, get_cancel_keyboard, get_date_selection_keyboard
from app.repositories.object_repo import WorkObjectRepository
from app.repositories.payment_repo import PaymentRepository
from app.repositories.user_repo import UserRepository
from app.utils.dateparse import get_today_in_timezone, parse_date, parse_russian_date
from app.utils.formatting import format_currency

router = Router()


class AddPaymentStates(StatesGroup):
    waiting_for_amount = State()
    waiting_for_date = State()
    waiting_for_manual_date = State()
    waiting_for_object = State()
    waiting_for_selection_object = State()


# 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /payment –∏ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É" -
@router.message(Command("payment"))
async def cmd_payment(message: types.Message, state: FSMContext):
    """Handle /payment command - start adding payment"""
    print("/payment command received")
    await state.clear()
    await state.set_state(AddPaymentStates.waiting_for_amount)

    await message.answer(
        "üí∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</b>\n\n" "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
        reply_markup=get_cancel_keyboard(),
        parse_mode="HTML",
    )


@router.message(lambda message: message.text == Texts.ADD_PAYMENT)
async def add_payment_button(message: types.Message, state: FSMContext):
    """Handle add payment button press"""
    await cmd_payment(message, state)


# @router.callback_query(AddPaymentCallback.filter())
# async def add_payment_from_object(
#     callback: CallbackQuery, callback_data: AddPaymentCallback, state: FSMContext
# ):
#     """Handle inline button from object details to add payment for specific object"""
#     print("add_payment_from_object")
#     await state.clear()

#     object_id = callback_data.object_id
#     if object_id is None:
#         await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞")
#         return

#     # Verify object belongs to user
#     async with db_session() as session:
#         user_repo = UserRepository(session)
#         object_repo = WorkObjectRepository(session)
#         user = await user_repo.get_by_telegram_id(callback.from_user.id)
#         if not user:
#             await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
#             return
#         work_object = await object_repo.get_by_id(object_id, user.id)
#         if not work_object:
#             await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
#             return

#     # Store object_id and start FSM from amount step
#     await state.update_data(object_id=object_id)
#     await state.set_state(AddPaymentStates.waiting_for_amount)

#     if isinstance(callback.message, types.Message):
#         await callback.message.edit_text(
#             "üí∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):",
#             reply_markup=get_cancel_keyboard(),
#             parse_mode="HTML",
#         )
#         await callback.answer()


# 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã -
@router.message(StateFilter(AddPaymentStates.waiting_for_amount))
async def process_amount(message: types.Message, state: FSMContext):
    """Process payment amount input"""
    try:
        amount_rubles = int(message.text)
        if amount_rubles <= 0:
            raise ValueError("Amount must be positive")

        # Convert to kopecks
        amount_kopecks = amount_rubles * 100

        await state.update_data(amount_kopecks=amount_kopecks)
        await state.set_state(AddPaymentStates.waiting_for_date)

        today = get_today_in_timezone()
        today_str = today.strftime("%d.%m.%y")

        await message.answer(
            f"üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì):\n\n"
            f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: <b>{today_str}</b>\n"
            f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì",
            reply_markup=get_date_selection_keyboard(),
            parse_mode="HTML",
        )

    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã –æ–ø–ª–∞—Ç—ã.",
            reply_markup=get_date_selection_keyboard(),
        )


# 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ -
@router.callback_query(
    StateFilter(AddPaymentStates.waiting_for_date),
    F.data.in_({"date_today", "date_yesterday", "date_manual"}),
)
async def handle_payment_date_selection(
    callback: types.CallbackQuery, state: FSMContext
):
    # –ª–æ–≥–∏–∫–∞ –¥–ª—è FSM AddPaymentStates
    if not isinstance(callback.message, types.Message):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    data = callback.data
    current_state = await state.get_state()

    if data == "date_today":
        current_date = get_today_in_timezone()
    elif data == "date_yesterday":
        current_date = get_today_in_timezone() - timedelta(days=1)
    elif data == "date_manual":
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        if current_state == AddPaymentStates.waiting_for_date:
            await state.set_state(AddPaymentStates.waiting_for_date)
        elif current_state == AddPaymentStates.waiting_for_date:
            await state.set_state(AddPaymentStates.waiting_for_manual_date)
        if isinstance(callback.message, types.Message):
            await callback.message.answer(
                "üìÖ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì:",
                reply_markup=get_cancel_keyboard(),
            )
            await callback.answer()
            return
    await state.update_data(date=current_date)

    state_data = await state.get_data()
    object_id = state_data.get("object_id")

    if object_id:
        await callback.answer(f"–û–±—ä–µ–∫—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω.{object_id}")
        return

    user, active_objects = await get_user_and_objects(callback.from_user.id)
    if not user:
        await state.clear()
        await callback.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return

    await state.set_state(AddPaymentStates.waiting_for_selection_object)
    await prompt_object_selection(callback.message, active_objects)


# üì¶ –•–µ–Ω–¥–ª–µ—Ä: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
@router.message(StateFilter(AddPaymentStates.waiting_for_object))
async def process_payment_object(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–ª–∞—Ç—É"""
    if not message.text or not message.from_user:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    data = await state.get_data()
    object_name = message.text.strip()

    if not object_name:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.",
            reply_markup=get_cancel_keyboard(),
        )
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ data –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    data["object_name"] = object_name

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –æ–±—ë—Ä—Ç–∫—É —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
    payment = await process_payment_transaction(
        telegram_id=message.from_user.id,
        data=data,
    )

    if not payment:
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        await state.clear()
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    date_str = payment.date.strftime("%d.%m.%y")
    amount_str = format_currency(payment.amount)

    success_text = (
        f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        f"üí∞ –°—É–º–º–∞: {amount_str}\n"
        f"üèóÔ∏è –û–±—ä–µ–∫—Ç: {payment.work_object.name}"
    )

    await message.answer(success_text, parse_mode="HTML")
    await state.clear()


# üß± –•–µ–Ω–¥–ª–µ—Ä: –≤—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
@router.callback_query(
    StateFilter(AddPaymentStates.waiting_for_selection_object),
    ObjectCallback.filter(F.action == "select"),
)
async def handle_object_select(
    callback: types.CallbackQuery,
    callback_data: ObjectCallback,
    state: FSMContext,
):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–ª–∞—Ç–µ–∂ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
    if not isinstance(callback.message, types.Message):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await state.update_data(object_id=callback_data.object_id)
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –æ–±—ë—Ä—Ç–∫—É —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
    payment = await process_payment_transaction(
        telegram_id=callback.from_user.id,
        data=data,
    )

    if not payment:
        await callback.message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        await state.clear()
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    date_str = payment.date.strftime("%d.%m.%y")
    amount_str = format_currency(payment.amount)

    success_text = (
        f"‚úÖ <b>–û–ø–ª–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        f"üìÖ –î–∞—Ç–∞: {date_str}\n"
        f"üí∞ –°—É–º–º–∞: {amount_str}\n"
        f"üèóÔ∏è –û–±—ä–µ–∫—Ç: {payment.work_object.name}"
    )

    await callback.message.answer(success_text, parse_mode="HTML")
    await state.clear()


# üèóÔ∏è –•–µ–Ω–¥–ª–µ—Ä: –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä—É—á–Ω–æ–º—É –≤–≤–æ–¥—É –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
@router.callback_query(
    StateFilter(AddPaymentStates.waiting_for_selection_object),
    ObjectCallback.filter(F.action == "manual"),
)
async def handle_manual_object_input(callback: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞"""
    print("–∫–Ω–æ–ø–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞")
    await state.set_state(AddPaymentStates.waiting_for_object)

    if isinstance(callback.message, types.Message):
        await callback.message.edit_text(
            "üèóÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ñ–ö –û–ª–∏–º–ø–∏–π—Å–∫–∏–π, –î–∞—á–∞ –ú–∞—Ä–∏–Ω–∞, –†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã",
            reply_markup=get_cancel_keyboard(),
        )
    await callback.answer()
