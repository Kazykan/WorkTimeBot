from __future__ import annotations
from operator import call

from aiogram import Router, types, F
from aiogram.types import Message
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


from app.db.session import db_session
from app.fsm.callback_data import ObjectCallback
from app.keyboards.common import Texts
from app.keyboards.objects import (
    get_confirm_delete_keyboard,
    get_object_actions_keyboard,
    get_objects_list_keyboard,
)
from app.models.work_object import ObjectStatus
from app.repositories.object_repo import WorkObjectRepository
from app.repositories.payment_repo import PaymentRepository
from app.repositories.time_repo import TimeEntryRepository
from app.repositories.user_repo import UserRepository
from app.utils.formatting import format_currency, format_hours

router = Router()


class ObjectStates(StatesGroup):
    waiting_for_object = State()


@router.callback_query(
    StateFilter(ObjectStates.waiting_for_object),
    ObjectCallback.filter(F.action == "select"),
)
async def cmd_select_object(
    query: types.CallbackQuery, callback_data: ObjectCallback, state: FSMContext
):
    """Handle object selection"""
    print("cmd_select_object")
    await state.clear()
    print(f"cmd_select_object {callback_data.object_id}")
    object_id = callback_data.object_id  # —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë–º ID –∏–∑ callback_data
    if not object_id:
        await query.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞")
        return

    async with db_session() as session:
        user_repo = UserRepository(session)
        object_repo = WorkObjectRepository(session)
        time_repo = TimeEntryRepository(session)
        payment_repo = PaymentRepository(session)

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_repo.get_by_telegram_id(query.from_user.id)
        if not user:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç
        work_object = await object_repo.get_by_id(object_id, user.id)
        if not work_object:
            await query.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±—ä–µ–∫—Ç—É
        time_entries = await time_repo.get_by_object_id(object_id)
        payments = await payment_repo.get_by_object_id(object_id)

        total_hours = int(sum(entry.hours for entry in time_entries))
        total_payments = sum(payment.amount for payment in payments)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        status_emoji = "üîµ" if work_object.status == ObjectStatus.ACTIVE else "üü¢"
        status_text = (
            "–ê–∫—Ç–∏–≤–µ–Ω" if work_object.status == ObjectStatus.ACTIVE else "–ó–∞–≤–µ—Ä—à—ë–Ω"
        )

        info_text = (
            f"üèóÔ∏è <b>{work_object.name}</b>\n"
            f"–°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}\n"
            f"–í—Å–µ–≥–æ —á–∞—Å–æ–≤: {format_hours(total_hours)}\n"
            f"–í—Å–µ–≥–æ –æ–ø–ª–∞—Ç: {format_currency(total_payments)}\n"
            f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {work_object.created_at.strftime('%d.%m.%y')}"
        )

        if time_entries:
            first_date = min(entry.date for entry in time_entries).strftime("%d.%m.%y")
            info_text += f"\n–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç: {first_date}"

        if work_object.status == ObjectStatus.COMPLETED and time_entries:
            last_date = max(entry.date for entry in time_entries).strftime("%d.%m.%y")
            info_text += f"\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {last_date}"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç
        if time_entries:
            info_text += "\n\nüïí <b>–ó–∞–ø–∏—Å–∏ —Ä–∞–±–æ—Ç:</b>"
            for entry in sorted(time_entries, key=lambda x: x.date):
                info_text += f"\n‚Ä¢ {entry.date.strftime('%d.%m.%y')} ‚Äî {format_hours(entry.hours)}"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–ª–∞—Ç
        if payments:
            info_text += "\n\nüí∞ <b>–ó–∞–ø–∏—Å–∏ –æ–ø–ª–∞—Ç:</b>"
            for payment in sorted(payments, key=lambda x: x.date):
                info_text += f"\n‚Ä¢ {payment.date.strftime('%d.%m.%y')} ‚Äî {format_currency(payment.amount)}"

        if isinstance(query.message, Message):
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            await query.message.edit_text(
                info_text,
                reply_markup=get_object_actions_keyboard(
                    work_object, total_hours, total_payments
                ),
                parse_mode="HTML",
            )

    await query.answer()


# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.message(Command("objects"))
async def cmd_objects(message: types.Message, state: FSMContext):
    """Handle /objects command"""
    await state.clear()
    await show_objects_list(message, include_completed=True)


@router.message(lambda message: message.text == Texts.OBJECTS)
async def objects_button(message: types.Message, state: FSMContext):
    """Handle objects button press"""
    await state.clear()
    await show_objects_list(message, include_completed=True)


async def show_objects_list(message: types.Message, include_completed: bool = True):
    """Show list of work objects"""
    async with db_session() as session:
        user_repo = UserRepository(session)
        object_repo = WorkObjectRepository(session)

        user = await user_repo.get_by_telegram_id(message.from_user.id)
        if not user:
            await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            )
            return

        objects = await object_repo.get_all_for_user(user.id, include_completed)

        if not objects:
            await message.answer(
                "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤.\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç, –¥–æ–±–∞–≤–∏–≤ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –æ–ø–ª–∞—Ç—É.",
                reply_markup=get_objects_list_keyboard([], include_completed),
            )
            return

        status_text = "–≤—Å–µ—Ö" if include_completed else "–∞–∫—Ç–∏–≤–Ω—ã—Ö"
        await message.answer(
            f"üèóÔ∏è –í–∞—à–∏ –æ–±—ä–µ–∫—Ç—ã ({status_text}):",
            reply_markup=get_objects_list_keyboard(objects, include_completed),
        )


@router.callback_query(lambda c: c.data == "objects_list")
async def objects_list_callback(callback: types.CallbackQuery, state: FSMContext):
    """Handle objects list callback"""
    await state.clear()
    await show_objects_list(callback.message, include_completed=True)
    await callback.answer()


@router.callback_query(lambda c: c.data == "objects_active_only")
async def objects_active_only_callback(
    callback: types.CallbackQuery, state: FSMContext
):
    """Handle active only filter callback"""
    await state.clear()
    await show_objects_list(callback.message, include_completed=False)
    await callback.answer()


@router.callback_query(lambda c: c.data == "objects_all")
async def objects_all_callback(callback: types.CallbackQuery, state: FSMContext):
    """Handle all objects filter callback"""
    await state.clear()
    await show_objects_list(callback.message, include_completed=True)
    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("complete_"))
async def complete_object_callback(callback: types.CallbackQuery, state: FSMContext):
    """Handle complete object callback"""
    object_id = int(callback.data.split("_")[1])

    async with db_session() as session:
        user_repo = UserRepository(session)
        object_repo = WorkObjectRepository(session)

        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        work_object = await object_repo.update_status(
            object_id, user.id, ObjectStatus.COMPLETED
        )
        if work_object:
            await callback.answer("‚úÖ –û–±—ä–µ–∫—Ç –∑–∞–≤–µ—Ä—à—ë–Ω")
            # Refresh object details
            await object_details_callback(callback, state)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞")


@router.callback_query(lambda c: c.data.startswith("reopen_"))
async def reopen_object_callback(callback: types.CallbackQuery, state: FSMContext):
    """Handle reopen object callback"""
    object_id = int(callback.data.split("_")[1])

    async with db_session() as session:
        user_repo = UserRepository(session)
        object_repo = WorkObjectRepository(session)

        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        work_object = await object_repo.update_status(
            object_id, user.id, ObjectStatus.ACTIVE
        )
        if work_object:
            await callback.answer("üîÑ –û–±—ä–µ–∫—Ç –æ—Ç–∫—Ä—ã—Ç –∑–∞–Ω–æ–≤–æ")
            # Refresh object details
            await object_details_callback(callback, state)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–±—ä–µ–∫—Ç–∞")


@router.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_object_callback(callback: types.CallbackQuery, state: FSMContext):
    """Handle delete object callback"""
    object_id = int(callback.data.split("_")[1])

    async with db_session() as session:
        user_repo = UserRepository(session)
        object_repo = WorkObjectRepository(session)

        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        work_object = await object_repo.get_by_id(object_id, user.id)
        if not work_object:
            await callback.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        await callback.message.edit_text(
            f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞</b>\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç <b>¬´{work_object.name}¬ª</b>?\n\n"
            f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=get_confirm_delete_keyboard(object_id),
            parse_mode="HTML",
        )

    await callback.answer()


@router.callback_query(lambda c: c.data.startswith("confirm_delete_"))
async def confirm_delete_callback(callback: types.CallbackQuery, state: FSMContext):
    """Handle confirm delete callback"""
    object_id = int(callback.data.split("_")[2])

    async with db_session() as session:
        user_repo = UserRepository(session)
        object_repo = WorkObjectRepository(session)

        user = await user_repo.get_by_telegram_id(callback.from_user.id)
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        success = await object_repo.delete_object(object_id, user.id)
        if success:
            await callback.answer("üóëÔ∏è –û–±—ä–µ–∫—Ç —É–¥–∞–ª—ë–Ω")
            await show_objects_list(callback.message, include_completed=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞")
