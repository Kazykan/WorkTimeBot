from __future__ import annotations
from typing import Optional

from aiogram import Router, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from app.fsm.callback_data import ObjectCallback
from app.handlers.utils.db_utilits import get_user_and_objects, save_time_entry
from app.handlers.utils.time_entry import (
    prompt_for_comment,
    prompt_object_selection,
    validate_end_time,
)
from app.keyboards.common import (
    get_cancel_keyboard,
    get_date_selection_keyboard,
)
from app.utils.dateparse import (
    get_today_in_timezone,
    parse_date,
    parse_time,
    calculate_hours,
)
from app.utils.formatting import format_hours

router = Router()


class AddTimeStates(StatesGroup):
    waiting_for_date = State()
    waiting_for_start_time = State()
    waiting_for_end_time = State()
    waiting_for_select_object = State()
    waiting_for_object = State()
    waiting_for_comment = State()


@router.message(Command("add"))
async def cmd_add(message: types.Message, state: FSMContext):
    """Handle /add command - start adding work hours"""
    await state.clear()
    await state.set_state(AddTimeStates.waiting_for_date)

    await message.answer(
        "‚è∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã</b>\n\n" "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=get_date_selection_keyboard(),
        parse_mode="HTML",
    )


@router.message(StateFilter(AddTimeStates.waiting_for_date))
async def process_date(message: types.Message, state: FSMContext):
    """Process date input"""
    if message.text and message.text.lower() in ["—Å–µ–≥–æ–¥–Ω—è", "today", "—Å–µ–π—á–∞—Å", "now"]:
        date = get_today_in_timezone()
    else:
        if not message.text:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É.")
            return
        parse_date_data = parse_date(message.text)
        if not parse_date_data:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.08.24 –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å–µ–≥–æ–¥–Ω—è'",
                reply_markup=get_cancel_keyboard(),
            )
            return
        date = parse_date_data

    await state.update_data(date=date)
    await state.set_state(AddTimeStates.waiting_for_start_time)

    await message.answer(
        "üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 09:30, 14:00, 18:45",
        reply_markup=get_cancel_keyboard(),
    )


@router.message(StateFilter(AddTimeStates.waiting_for_start_time))
async def process_start_time(message: types.Message, state: FSMContext):
    """Process start time input"""
    if not message.text:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞.")
        return

    data = await state.get_data()
    date = data["date"]

    start_time = parse_time(message.text, date)
    if not start_time:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 09:30, 14:00, 18:45",
            reply_markup=get_cancel_keyboard(),
        )
        return

    await state.update_data(start_time=start_time)
    await state.set_state(AddTimeStates.waiting_for_end_time)

    await message.answer(
        "üïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú):\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 17:30, 20:00, 22:45",
        reply_markup=get_cancel_keyboard(),
    )
    return


@router.message(StateFilter(AddTimeStates.waiting_for_end_time))
async def process_end_time(message: types.Message, state: FSMContext):
    if not message.text or not message.from_user:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
        return

    data = await state.get_data()
    date = data["date"]
    start_time = data["start_time"]

    end_time = parse_time(message.text, date)
    if end_time is None:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 17:30, 20:00, 22:45",
            reply_markup=get_cancel_keyboard(),
        )
        return

    if not await validate_end_time(end_time, start_time, message):
        return

    hours = calculate_hours(start_time, end_time)
    await state.update_data(end_time=end_time, hours=hours)

    if data.get("object_id"):
        await state.set_state(AddTimeStates.waiting_for_comment)
        await prompt_for_comment(message)
        return

    user, active_objects = await get_user_and_objects(message.from_user.id)
    if not user:
        await state.clear()
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return

    await state.set_state(AddTimeStates.waiting_for_select_object)
    await prompt_object_selection(message, active_objects)


@router.message(StateFilter(AddTimeStates.waiting_for_object))
async def process_object(message: types.Message, state: FSMContext):
    """Process object name input"""
    if not message.text:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    object_name = message.text.strip()
    if not object_name:
        await message.answer(
            "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.",
            reply_markup=get_cancel_keyboard(),
        )
        return

    await state.update_data(object_name=object_name)
    await state.set_state(AddTimeStates.waiting_for_comment)

    await message.answer(
        "üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–Ω—Ç–∞–∂ —Ç—Ä—É–±, –ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω, –£–∫–ª–∞–¥–∫–∞ –ø–ª–∏—Ç–∫–∏\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞",
        reply_markup=get_cancel_keyboard(),
    )


@router.message(StateFilter(AddTimeStates.waiting_for_comment))
async def process_comment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤—Ä–µ–º–µ–Ω–∏"""
    if isinstance(message, types.Message) and not message.from_user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    data = await state.get_data()
    comment = (
        message.text.strip()
        if message.text
        and message.text.lower() not in {"–Ω–µ—Ç", "no", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", ""}
        else None
    )

    response = await save_time_entry(message.from_user.id, data, comment)

    if response is not None:
        if response.startswith("‚ùå"):
            await message.answer(response)
        else:
            await message.answer(response, parse_mode="HTML")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏.")
    await state.clear()


@router.callback_query(lambda c: c.data == "cancel")
async def cancel_add_time(callback: types.CallbackQuery, state: FSMContext):
    """Cancel adding time entry"""
    await state.clear()
    if isinstance(callback.message, types.Message):
        await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()


# 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ -
@router.callback_query(
    StateFilter(AddTimeStates.waiting_for_select_object),
    ObjectCallback.filter(F.action == "select"),
)
async def handle_object_select(
    callback: types.CallbackQuery,
    callback_data: ObjectCallback,
    state: FSMContext,
):
    await state.update_data(object_id=callback_data.object_id)
    await state.set_state(AddTimeStates.waiting_for_comment)
    if isinstance(callback.message, types.Message):
        await callback.message.edit_text(
            "üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ–Ω—Ç–∞–∂ —Ç—Ä—É–±, –ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω, –£–∫–ª–∞–¥–∫–∞ –ø–ª–∏—Ç–∫–∏\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞",
            reply_markup=get_cancel_keyboard(),
        )
    await callback.answer()


# 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –æ–±—ä–µ–∫—Ç–∞
@router.callback_query(
    StateFilter(AddTimeStates.waiting_for_select_object),
    ObjectCallback.filter(F.action == "manual"),
)
async def handle_manual_object_input(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(AddTimeStates.waiting_for_object)
    if isinstance(callback.message, types.Message):
        await callback.message.edit_text(
            "üèóÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ñ–ö –û–ª–∏–º–ø–∏–π—Å–∫–∏–π, –î–∞—á–∞ –ú–∞—Ä–∏–Ω–∞, –†–µ–º–æ–Ω—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã",
            reply_markup=get_cancel_keyboard(),
        )
    await callback.answer()
